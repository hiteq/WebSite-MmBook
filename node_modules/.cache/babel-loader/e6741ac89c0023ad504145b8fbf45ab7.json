{"ast":null,"code":"import _slicedToArray from \"/Users/hiteq/Downloads/yqmdm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n/**\n * Calculate the top/bottom scroll constraints of a full-screen element vs the viewport\n */\n\nexport function useScrollConstraints(ref, measureConstraints) {\n  var _useState = useState({\n    top: 0,\n    bottom: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      constraints = _useState2[0],\n      setConstraints = _useState2[1];\n\n  useEffect(function () {\n    if (!measureConstraints) return;\n    var element = ref.current;\n    var viewportHeight = window.innerHeight;\n    var contentTop = element.offsetTop;\n    var contentHeight = element.offsetHeight;\n    var scrollableViewport = viewportHeight - contentTop * 2;\n    var top = Math.min(scrollableViewport - contentHeight, 0);\n    setConstraints({\n      top: top,\n      bottom: 0\n    });\n  }, [ref, measureConstraints]);\n  return constraints;\n}","map":{"version":3,"sources":["/Users/hiteq/Downloads/yqmdm/src/utils/use-scroll-constraints.js"],"names":["useState","useEffect","useScrollConstraints","ref","measureConstraints","top","bottom","constraints","setConstraints","element","current","viewportHeight","window","innerHeight","contentTop","offsetTop","contentHeight","offsetHeight","scrollableViewport","Math","min"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA;;;;AAGA,OAAO,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,kBAAnC,EAAuD;AAAA,kBACtBJ,QAAQ,CAAC;AAC7CK,IAAAA,GAAG,EAAE,CADwC;AAE7CC,IAAAA,MAAM,EAAE;AAFqC,GAAD,CADc;AAAA;AAAA,MACrDC,WADqD;AAAA,MACxCC,cADwC;;AAK5DP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACG,kBAAL,EAAyB;AACzB,QAAMK,OAAO,GAAGN,GAAG,CAACO,OAApB;AACA,QAAMC,cAAc,GAAGC,MAAM,CAACC,WAA9B;AACA,QAAMC,UAAU,GAAGL,OAAO,CAACM,SAA3B;AACA,QAAMC,aAAa,GAAGP,OAAO,CAACQ,YAA9B;AACA,QAAMC,kBAAkB,GAAGP,cAAc,GAAGG,UAAU,GAAG,CAAzD;AACA,QAAMT,GAAG,GAAGc,IAAI,CAACC,GAAL,CAASF,kBAAkB,GAAGF,aAA9B,EAA6C,CAA7C,CAAZ;AACAR,IAAAA,cAAc,CAAC;AAAEH,MAAAA,GAAG,EAAHA,GAAF;AAAOC,MAAAA,MAAM,EAAE;AAAf,KAAD,CAAd;AACD,GATQ,EASN,CAACH,GAAD,EAAMC,kBAAN,CATM,CAAT;AAUA,SAAOG,WAAP;AACD","sourcesContent":["import { useState, useEffect } from \"react\";\n/**\n * Calculate the top/bottom scroll constraints of a full-screen element vs the viewport\n */\nexport function useScrollConstraints(ref, measureConstraints) {\n  const [constraints, setConstraints] = useState({\n    top: 0,\n    bottom: 0\n  });\n  useEffect(() => {\n    if (!measureConstraints) return;\n    const element = ref.current;\n    const viewportHeight = window.innerHeight;\n    const contentTop = element.offsetTop;\n    const contentHeight = element.offsetHeight;\n    const scrollableViewport = viewportHeight - contentTop * 2;\n    const top = Math.min(scrollableViewport - contentHeight, 0);\n    setConstraints({ top, bottom: 0 });\n  }, [ref, measureConstraints]);\n  return constraints;\n}\n"]},"metadata":{},"sourceType":"module"}